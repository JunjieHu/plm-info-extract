import sys
import subprocess



#defining functions:
#convert:
#the function takes an input file which has the original dataset, output file which is where the converted dataset will be saved, and is_test_file which is set to False by dafault as arguments
#it converts the original data into a format accpeted by the biobert-pytorch
#saves the data into the output file given
def convert(input_file, output_file, is_test_file=False):
	with open(output_file, 'w') as fout:
		cnt = 0
		header=True
		for line in open(input_file):
			items = line.strip().split('\t')
			sent = items[1]
			gene_sidx = int(items[6])
			gene_eidx = int(items[7])
			phon_sidx = int(items[8])
			phon_eidx = int(items[9])
			relation = 0 if items[10] == 'False' else 1
			
			if gene_sidx < phon_sidx:
				new_sent = sent[: gene_sidx] + '@GENE$' + sent[gene_eidx: phon_sidx] + '@DISEASE$' + sent[phon_eidx:]
			else:
				new_sent = sent[: phon_sidx] + '@DISEASE$' + sent[phon_eidx: gene_sidx] + '@GENE$' + sent[gene_eidx:]
			index=cnt
		
			if is_test_file:
				if header:
					fout.write(f'{"index"}\t{"sentence"}\t{"label"}\n')		
					header=False
				else:
					fout.write(f'{index}\t{new_sent}\t{relation}\n')
					cnt=cnt+1
			else:
				fout.write(f'{new_sent}\t{relation}\n')
				



def main():
	
	#calling the bash script that splits the data into 3 different datasets:train.tsv, test.tsv, dev.tsv
  process=subprocess.call(['chmod u+x ./split.sh'], shell=True)
	
	print(process)
	if process==0:
		input_file_for_training = 'train.tsv'
		output_file_for_training = '/Users/nafisaraisa/biobert-pytorch/datasets/RE/GAD/1/train.tsv'
	  #calling the function:
		convert(input_file_for_training, output_file_for_training, is_test_file=False)
	
		#test.tsv
		input_file_for_testing = 'test.tsv'
		output_file_for_testing = '/Users/nafisaraisa/biobert-pytorch/datasets/RE/GAD/1/test.tsv'
		#calling the function
    convert(input_file_for_testing, output_file_for_testing, is_test_file=True)
		
		

	else:
		print("The split.sh file did not run successfully")


if __name__=='__main__':
	main()
