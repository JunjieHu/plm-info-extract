import urllib.request, urllib.error, urllib.parse
import json
import os
import re
import validators
from pprint import pprint
from urllib.request import Request, urlopen

REST_URL = "http://data.bioontology.org"
API_KEY = "a67212fc-49ae-45d0-ad42-755746744b60"


output="From"+"\t" + "To" +"\t" + "Match type" +"\t"  + "String_Matched"+"\t" +"Ontology"+ "\t"+"Ontology ID"+"\t"

#new path:this is path where the resulting directory is
new_path ="/Users/nafisaraisa/documents/Biomedical_Data_Science/recognized_terms"

def get_json(url):
    opener = urllib.request.build_opener()
    opener.addheaders = [('Authorization', 'apikey token=' + API_KEY)]
    return json.loads(opener.open(url).read())




def print_annotations(annotations, get_class=True):
    for result in annotations:
        class_details = result["annotatedClass"]
        if get_class:
            try:
                class_details = get_json(result["annotatedClass"]["links"]["self"])
            except urllib.error.HTTPError:
                print(f"Error retrieving {result['annotatedClass']['@id']}")
                continue

 
        os.chdir(new_path)
        if os.path.exists(file):
            append_write = 'a' # append if already exists
            
        else:
            append_write = 'w' # make a new file if not
            
            with open(file, 'w') as f:
                f.write(output + "\n")
        
            
            
        for annotation in result["annotations"]:
       	    output_string=str(annotation["from"])
            output_string+= "\t"+str(annotation["to"])
            string_matched=text_to_annotate[annotation["from"]-1:annotation["to"]]
            output_string+="\t" + annotation["matchType"]
            output_string+= "\t" + string_matched
            try:
                output_string+="\t" + class_details["prefLabel"]
            except TypeError:
                output_string+="Error"
                continue
                
            output_string+="\t" + class_details["links"]["ontology"]
            with open(file,append_write) as f:
                f.write(output_string + "\n")
                print(output_string)

        
        if result["hierarchy"]:
            print("\n\tHierarchy annotations")
            for annotation in result["hierarchy"]:
                try:
                    class_details = get_json(annotation["annotatedClass"]["links"]["self"])
                except urllib.error.HTTPError:
                    print(f"Error retrieving {annotation['annotatedClass']['@id']}")
                    continue
                pref_label = class_details["prefLabel"] or "no label"
                

        print("\n\n")
        
        
        
        
        
        
#my code

# Folder Path
path="/Users/nafisaraisa/documents/Biomedical_Data_Science/pubmed_extract"

# Change the directory
os.chdir(path)


# Read text File
def read_text_file(file_path):
    with open(file_path, 'r') as f:
        content=f.read()
        ab_start = re.search('AB  - ', content).end()
        ab_end = re.search('[A-Z]+[ ]* - ', content[ab_start:]).start() + ab_start
        abstract= content[ab_start : ab_end]
        return abstract
        
    


# iterate through all file
for file in os.listdir():
    # Check whether file is in text format or not
    if file.endswith(".txt"):
        file_path = f"{path}/{file}"
        #print(file*10)
        new_file=os.path.join(new_path,file)
        print(new_file)
        with open(new_file, 'w') as f:
             f.write(output + "\n")
        
    # call read text file function
        text_to_annotate=read_text_file(file_path)
       
    # Annotate using the provided text
        annotations = get_json(REST_URL + "/annotator?ontologies=HP&text=" + urllib.parse.quote(text_to_annotate))
        
    # Print out annotation details
        print_annotations(annotations)
        
   
